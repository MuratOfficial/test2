const express = require('express');
const SMB2 = require('@marsaud/smb2');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = 3000;

const TEMP_DIR = path.join(__dirname, 'temp');

// –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ temp –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
function clearTempFolder() {
    if (fs.existsSync(TEMP_DIR)) {
        fs.readdirSync(TEMP_DIR).forEach(file => {
            const filePath = path.join(TEMP_DIR, file);
            fs.unlinkSync(filePath);
        });
    } else {
        fs.mkdirSync(TEMP_DIR, { recursive: true });
    }
    console.log('üßπ –ü–∞–ø–∫–∞ temp –æ—á–∏—â–µ–Ω–∞');
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
function scheduleFileDeletion(filePath) {
    setTimeout(() => {
        if (fs.existsSync(filePath)) {
            fs.unlink(filePath, err => {
                if (!err) console.log(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filePath}`);
            });
        }
    }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
}

// üì• –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ)
app.get('/download', async (req, res) => {
    const { host, share, domain, username, password, file } = req.query;

    if (!host || !share || !domain || !username || !password || !file) {
        return res.status(400).json({ error: '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã' });
    }

    const smbPath = `\\\\${host}\\${share}`;
    const remoteFile = file;
    const localFile = path.join(TEMP_DIR, remoteFile);

    const smbClient = new SMB2({ share: smbPath, domain, username, password });

    try {
        console.log(`üì• –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: ${remoteFile} —Å ${smbPath}`);
        const fileData = await smbClient.readFile(remoteFile);

        fs.writeFileSync(localFile, fileData);
        console.log(`‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: ${localFile}`);

        res.download(localFile, remoteFile, err => {
            if (err) console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞:', err);
            scheduleFileDeletion(localFile);
        });

    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: err.message });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    clearTempFolder(); // –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ temp –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
